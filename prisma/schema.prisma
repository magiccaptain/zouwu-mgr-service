generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  name         String
  username     String    @unique
  password     String
  phone        String?   @unique
  email        String?   @unique
  roles        String[]  @default(["USER"])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  needResetPwd Boolean?  @default(true)
  Session      Session[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  expireAt  DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Broker {
  id          Int           @id @default(autoincrement())
  name        String
  key         String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  FundAccount FundAccount[]
  HostServer  HostServer[]
}

model Company {
  id          Int           @id @default(autoincrement())
  name        String
  key         String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  FundAccount FundAccount[]
  HostServer  HostServer[]
  Product     Product[]
}

model HostServer {
  id            Int       @id @default(autoincrement())
  name          String
  desc          String?
  market        Market
  host_ip       String?
  ssh_host      String?
  ssh_user      String?
  ssh_port      Int?
  home_dir      String?
  active        Boolean   @default(true)
  is_master     Boolean   @default(false)
  last_check_at DateTime?
  brokerKey     String
  companyKey    String
  remark        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  broker        Broker    @relation(fields: [brokerKey], references: [key])
  company       Company   @relation(fields: [companyKey], references: [key])

  @@unique([market, brokerKey, companyKey, ssh_host, ssh_port])
}

model Product {
  id          Int           @id @default(autoincrement())
  key         String        @unique
  name        String
  short_name  String?
  type        String
  companyKey  String
  active      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  FundAccount FundAccount[]
  company     Company       @relation(fields: [companyKey], references: [key])
}

model FundAccount {
  id                 Int                 @id @default(autoincrement())
  account            String              @unique
  brokerKey          String
  productKey         String
  companyKey         String
  type               FundAccountType     @default(STOCK)
  active             Boolean             @default(true)
  remark             String?
  branch             String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt
  ATPConfig          ATPConfig[]
  ExternalFundDatail ExternalFundDatail?
  broker             Broker              @relation(fields: [brokerKey], references: [key])
  company            Company             @relation(fields: [companyKey], references: [key])
  product            Product             @relation(fields: [productKey], references: [key])
  InnerFundSnapshot  InnerFundSnapshot[]
  TransferRecord     TransferRecord[]
  XTPConfig          XTPConfig[]
}

model XTPConfig {
  id                 Int         @id @default(autoincrement())
  fund_account       String
  market             Market
  ip                 String
  port               Int
  user               String
  password           String
  local_ip           String?     @default("")
  log_level          Int?        @default(4)
  account_key        String
  save_file_path     String?     @default(".")
  software_version   String?     @default("0.0.1")
  heat_beat_interval Int?        @default(3)
  fundAccount        FundAccount @relation(fields: [fund_account], references: [account])

  @@unique([fund_account, market])
}

model ATPConfig {
  id                       Int         @id @default(autoincrement())
  fund_account             String
  market                   Market
  ip                       String
  port                     Int
  spare_ip                 String?
  spare_port               Int?
  user                     String
  password                 String
  branch_id                String
  cust_id                  String
  cust_password            String
  sh_account_id            String
  sz_account_id            String
  client_name              String
  client_version           String
  client_feature_code      String
  account_mode             Int
  login_mode               Int
  order_way                String
  reconnect_time           Int?        @default(10)
  heartbeat_interval_milli Int?        @default(5000)
  connect_timeout_milli    Int?        @default(5000)
  fundAccount              FundAccount @relation(fields: [fund_account], references: [account])

  @@unique([fund_account, market])
}

model InnerFundSnapshot {
  id           Int                     @id @default(autoincrement())
  market       Market
  fund_account String
  trade_day    String
  reason       InnerFundSnapshotReason
  balance      Float
  buying_power Float
  frozen       Float
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @default(now()) @updatedAt
  xtp_account  Json?
  atp_account  Json?
  recordId     Int?
  fundAccount  FundAccount             @relation(fields: [fund_account], references: [account])
  record       TransferRecord?         @relation(fields: [recordId], references: [id])

  @@index([fund_account, market, trade_day(sort: Desc)])
}

model TransferRecord {
  id           Int                 @id @default(autoincrement())
  fund_account String
  trade_day    String
  market       Market
  direction    TransferDirection
  amount       Float
  type         TransferType
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @default(now()) @updatedAt
  createdBy    String?
  snapshots    InnerFundSnapshot[]
  fundAccount  FundAccount         @relation(fields: [fund_account], references: [account])

  @@index([fund_account, market, trade_day(sort: Desc)])
}

model ExternalFundDatail {
  id           Int         @id @default(autoincrement())
  fund_account String      @unique
  balance      Float
  fundAccount  FundAccount @relation(fields: [fund_account], references: [account])
}

enum Market {
  SH
  SZ
}

enum FundAccountType {
  STOCK
  FUTURES
}

enum InnerFundSnapshotReason {
  BEFORE_TRADING_DAY
  AFTER_TRADING_DAY
  MIDDLE_TRADING_DAY
  SYNC
  BEFORE_TRANSFER
  AFTER_TRANSFER
}

enum TransferDirection {
  IN
  OUT
}

enum TransferType {
  INNER
  EXTERNAL
}
