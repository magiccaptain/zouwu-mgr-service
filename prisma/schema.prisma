generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  name         String
  username     String    @unique
  password     String
  phone        String?   @unique
  email        String?   @unique
  permissions  String[]  @default([])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  needResetPwd Boolean?  @default(true)
  homePage     String?   @default("/")
  Session      Session[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  expireAt  DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Broker {
  id          Int           @id @default(autoincrement())
  name        String
  key         String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  FundAccount FundAccount[]
  HostServer  HostServer[]
}

model Company {
  id          Int           @id @default(autoincrement())
  name        String
  key         String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  FundAccount FundAccount[]
  HostServer  HostServer[]
  Product     Product[]
}

model HostServer {
  id            Int       @id @default(autoincrement())
  name          String
  desc          String?
  market        Market
  host_ip       String?
  ssh_host      String?
  ssh_user      String?
  ssh_port      Int?
  home_dir      String?
  active        Boolean   @default(true)
  is_master     Boolean   @default(false)
  last_check_at DateTime?
  brokerKey     String?
  companyKey    String?
  remark        String?
  // 磁盘总数 G
  disk_total    Int?
  // 磁盘使用 G
  disk_used     Int?
  // 主机名
  hostname      String?
  // 操作系统
  os            String?
  // 操作系统版本
  os_version    String?
  // cpu 型号
  cpu_model     String?
  // cpu 核数
  cpu_cores     Int?
  // 内存大小
  memory_size   Int?

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  broker        Broker?         @relation(fields: [brokerKey], references: [key])
  company       Company?        @relation(fields: [companyKey], references: [key])
  RemoteCommand RemoteCommand[]
  OpsWarning    OpsWarning[]

  @@unique([market, brokerKey, companyKey, ssh_host, ssh_port])
}

model Product {
  id          Int           @id @default(autoincrement())
  key         String        @unique
  name        String
  short_name  String?
  type        String
  companyKey  String
  active      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  FundAccount FundAccount[]
  company     Company       @relation(fields: [companyKey], references: [key])
}

model FundAccount {
  id                 Int                 @id @default(autoincrement())
  account            String              @unique
  brokerKey          String
  productKey         String
  companyKey         String
  type               FundAccountType     @default(STOCK)
  active             Boolean             @default(true)
  remark             String?
  branch             String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt
  ATPConfig          ATPConfig[]
  ExternalFundDatail ExternalFundDatail?
  broker             Broker              @relation(fields: [brokerKey], references: [key])
  company            Company             @relation(fields: [companyKey], references: [key])
  product            Product             @relation(fields: [productKey], references: [key])
  InnerFundSnapshot  InnerFundSnapshot[]
  TransferRecord     TransferRecord[]
  XTPConfig          XTPConfig[]
  OpsWarning         OpsWarning[]
  RemoteCommand      RemoteCommand[]
}

model XTPConfig {
  id                 Int         @id @default(autoincrement())
  fund_account       String
  market             Market
  ip                 String
  port               Int
  user               String
  password           String
  local_ip           String?     @default("")
  log_level          Int?        @default(4)
  account_key        String
  save_file_path     String?     @default(".")
  software_version   String?     @default("0.0.1")
  heat_beat_interval Int?        @default(3)
  fundAccount        FundAccount @relation(fields: [fund_account], references: [account])

  @@unique([fund_account, market])
}

model ATPConfig {
  id                        Int         @id @default(autoincrement())
  fund_account              String
  market                    Market
  ip                        String
  port                      Int
  spare_ip                  String?
  spare_port                Int?
  user                      String
  password                  String
  branch_id                 String
  cust_id                   String
  cust_password             String
  sh_account_id             String
  sz_account_id             String
  client_name               String
  client_version            String
  client_feature_code       String
  account_mode              Int
  login_mode                Int
  order_way                 String
  reconnect_time            Int?        @default(10)
  heartbeat_interval_milli  Int?        @default(5000)
  connect_timeout_milli     Int?        @default(5000)
  rsa_public_key_path       String?
  encrypt_password_lib_path String?
  fundAccount               FundAccount @relation(fields: [fund_account], references: [account])

  @@unique([fund_account, market])
}

model InnerFundSnapshot {
  id           Int                     @id @default(autoincrement())
  market       Market
  fund_account String
  trade_day    String
  reason       InnerFundSnapshotReason
  balance      Float
  buying_power Float
  frozen       Float
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @default(now()) @updatedAt
  xtp_account  Json?
  atp_account  Json?
  recordId     Int?
  fundAccount  FundAccount             @relation(fields: [fund_account], references: [account])
  record       TransferRecord?         @relation(fields: [recordId], references: [id])

  @@index([fund_account, market, trade_day(sort: Desc)])
}

model TransferRecord {
  id           Int                 @id @default(autoincrement())
  fund_account String
  trade_day    String
  market       Market
  direction    TransferDirection
  amount       Float
  type         TransferType
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @default(now()) @updatedAt
  createdBy    String?
  snapshots    InnerFundSnapshot[]
  fundAccount  FundAccount         @relation(fields: [fund_account], references: [account])

  @@index([fund_account, market, trade_day(sort: Desc)])
}

model ExternalFundDatail {
  id           Int         @id @default(autoincrement())
  fund_account String      @unique
  balance      Float
  fundAccount  FundAccount @relation(fields: [fund_account], references: [account])
}

enum Market {
  SH
  SZ
}

enum FundAccountType {
  STOCK
  FUTURES
}

enum InnerFundSnapshotReason {
  BEFORE_TRADING_DAY
  AFTER_TRADING_DAY
  MIDDLE_TRADING_DAY
  SYNC
  BEFORE_TRANSFER
  AFTER_TRANSFER
}

enum TransferDirection {
  IN
  OUT
}

enum TransferType {
  INNER
  EXTERNAL
}

enum OpsTaskType {
  BEFORE_CHECK_HOST_SERVER_DISK
  BEFORE_CHECK_HOST_SERVER_TIME
  BEFORE_SYNC_FUND_ACCOUNT
  AFTER_CHECK_HOST_SERVER_DISK
  AFTER_CHECK_OP_VALUE
  AFTER_ARCHIVE_TRADE_LOG
  AFTER_SYNC_FUND_ACCOUNT
  AFTER_SYNC_POSITIONS
  AFTER_SYNC_ORDER
  AFTER_SYNC_TRADE
  AFTER_SYNC_LAST_PRICE
  AFTER_PULL_OP_VALUE
  AFTER_PULL_QUOTE_SNAPSHOT
}

model OpsTask {
  id             Int             @id @default(autoincrement())
  type           OpsTaskType
  name           String
  trade_day      String
  remoteCommands RemoteCommand[]
  opsWarnings    OpsWarning[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([trade_day(sort: Desc)])
}

enum OpsWarningStatus {
  PENDING
  MANUAL_DONE
  AUTO_DONE
  AUTO_ERROR
}

enum OpsWarningType {
  // 磁盘检查失败
  DISK_CHECK_FAILED
  // 磁盘空间不足
  DISK_FULL
  // 时间检查失败
  TIME_CHECK_FAILED
  // 时间误差过大
  TIME_ERROR
  OP_VALUE_ERROR
}

model OpsWarning {
  id              Int              @id @default(autoincrement())
  trade_day       String
  status          OpsWarningStatus @default(PENDING)
  opsTaskId       Int?
  hostServerId    Int?
  remoteCommandId Int?
  fund_account    String?
  text            String?
  type            OpsWarningType?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  opsTask       OpsTask?       @relation(fields: [opsTaskId], references: [id])
  hostServer    HostServer?    @relation(fields: [hostServerId], references: [id])
  fundAccount   FundAccount?   @relation(fields: [fund_account], references: [account])
  remoteCommand RemoteCommand? @relation(fields: [remoteCommandId], references: [id])

  @@index([trade_day(sort: Desc)])
}

enum RemoteCommandStatus {
  PENDING
  DONE
  ERROR
}

enum RemoteCommandType {
  DISK_CHECK
  TIME_CHECK
  FREE_DISK
  QUERY_ACCOUNT
  QUERY_POSITION
  QUERY_ORDER
  QUERY_TRADE
  QUERY_LAST_PRICE
  PULL_OP_VALUE
  PULL_QUOTE_SNAPSHOT
  INNER_TRANSFER
  EXTERNAL_TRANSFER
  ARCHIVE_TRADE_LOG
}

model RemoteCommand {
  id           Int                 @id @default(autoincrement())
  trade_day    String
  cmd          String
  cwd          String?
  code         Int?                @default(-999)
  stdout       String?
  stderr       String?
  hostServerId Int
  opsTaskId    Int?
  fund_account String?
  status       RemoteCommandStatus @default(PENDING)
  type         RemoteCommandType?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  hostServer  HostServer   @relation(fields: [hostServerId], references: [id])
  opsTask     OpsTask?     @relation(fields: [opsTaskId], references: [id])
  fundAccount FundAccount? @relation(fields: [fund_account], references: [account])
  OpsWarning  OpsWarning[]

  @@index([hostServerId, trade_day(sort: Desc)])
}
